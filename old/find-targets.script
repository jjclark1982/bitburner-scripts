//Define Variables
currentScanLength = 0;
scanArray = ['home'];
Servers = [];
ServersM = [];  // Money
ServersHL = []; // HackingLevel
ServersHP = []; // HackingPorts
ServersP = [];  // Profits
basehackinglevel = -101;
target = 'foodnstuff';
host = getHostname();
mults = getHackingMultipliers();

//Skill Multiplier Constants
hackmult = mults.money;
growmult = mults.growth;
//Bitnode Multiplier Constants, update after changing Bitnodes
bitnodehackmult = 1.0000;
bitnodegrowmult = 1.0000;
bitnodeweakenmult = 1.0000;


//Scan Loop
while (currentScanLength < scanArray.length) {
    currentHost = scanArray[currentScanLength];
    newScan = scan(currentHost);
    for (j = 0; j < newScan.length; j++) {
        if (scanArray.indexOf(newScan[j]) == -1) {
            scanArray.push(newScan[j]);
            money = getServerMaxMoney(newScan[j]);
            if (money > 0) {
                Servers.push(newScan[j]);
                ServersM.push(money);
                ServersHP.push(getServerNumPortsRequired(newScan[j]));
                ServersHL.push(getServerRequiredHackingLevel(newScan[j]));
                time = 2 * getWeakenTime(newScan[j]) + getGrowTime(newScan[j]) + getHackTime(newScan[j]);
                profit = round(money / time);
                ServersP.push(profit);
            }
        }
    }
    currentScanLength++;
}

portBusters = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];
numPortBreakers = 0;
for (i = 0; i < portBusters.length; i++) {
    if (fileExists(portBusters[i], 'home')) {
        numPortBreakers++;
    }
}

hackinglevel = getHackingLevel();
print(basehackinglevel);

//Recalc & RetargetProfits if Hacking level has increased by 100
if (hackinglevel > basehackinglevel + 100) {
    basehackinglevel = hackinglevel;
    //Reset Profits
    ServersP = [];
    for (j = 0; j < Servers.length; j++) {
        time = 2 * getWeakenTime(Servers[j]) + getGrowTime(Servers[j]) + getHackTime(Servers[j]);
        profit = round(ServersM[j] / time);
        ServersP.push(profit);
    }

    print(Servers);
    print('Create Eligable Target List');
    targetlist = [];
    targetlistP = [];
    for (j = 0; j < Servers.length; j++) {
        if (ServersHP[j] <= numPortBreakers && ServersHL[j] <= hackinglevel) {
            targetlist.push(Servers[j]);
            targetlistP.push(ServersP[j]);
        }
    }

    print(targetlist);
    print('Find Optimal Target List');

    OptimalTargetList = [];
    OptimalTargetListM = [];
    OptimalTargetListG = [];
    OptimalTargetListHL = [];
    OptimalTargetListMS = [];

    for (i = 0; i < Math.min(targetlist.length,10); i++) {
        targetmaxprofit = 0;
        for (j = 0; j < targetlist.length; j++) {
            if (targetlistP[j] > targetmaxprofit) {
                targetmaxprofit = targetlistP[j];
            }
        }
        index = targetlistP.indexOf(targetmaxprofit);
        OptimalTargetList.push(targetlist[index]);
        OptimalTargetListG.push(getServerGrowth(targetlist[index]));
        OptimalTargetListHL.push(getServerRequiredHackingLevel(targetlist[index]));
        OptimalTargetListMS.push(Math.max(round(getServerBaseSecurityLevel(targetlist[index])/3),1));
        OptimalTargetListM.push(getServerMaxMoney(targetlist[index]));
        targetlistP[index] = 0;
    }
    tprint(OptimalTargetList);

}