export async function main(ns) {
    let bitnodeNumber = ns.args[0] || 12;
    let script = ns.args[1] || 'init.js';
    
    setTimeout(()=>{
        selectNextBitnode(bitnodeNumber, script);
    }, 0);
}

async function selectNextBitnode(n=12, script='init.js') {
    let button = await waitForElement(`[aria-label*="BitNode-${n}"`);
    button.click();

    button = await waitForElement(`[aria-label*="enter-bitnode-${n}"`);
    button.click();

    await sleep(1000);

    await runTerminalCommand(`run ${script}`);
}

async function waitForElement(selector) {
    const doc = eval("document");
    let el = doc.querySelector(selector);
    while (!el) {
        await sleep(1000);
        el = doc.querySelector(selector);
    }
    return el;
}

function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

async function runTerminalCommand(command) {
    const terminalInput = await waitForElement('#terminal-input');
    terminalInput.value = command;

    const handler = Object.keys(terminalInput)[1];
    terminalInput[handler].onChange({target:terminalInput});
    terminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});
    terminalInput.dispatchEvent(new KeyboardEvent('keydown', {
        bubbles: true, cancelable: true, keyCode: 13
    }));
    terminalInput.dispatchEvent(new KeyboardEvent('keyup', {
        bubbles: true, cancelable: true, keyCode: 13
    }));
}
